@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager

<ul class="navbar-nav">
    @if (!signInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a asp-controller="Account" asp-action="Login" class="nav-link">Login</a>
        </li>
        <li class="nav-item">
            <a asp-controller="Account" asp-action="Register" class="nav-link">Register</a>
        </li>
    }
    else
    {
        // Displaying Name instead of email.
        ApplicationUser? user = null;

        // Using claims to get the user details.
        var claimsIdentity = (ClaimsIdentity)User.Identity!;

        // Using claims to get the user id by getting the first claim.
        var userId = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier)!.Value;

        if (userId is not null)
        {
            user = await userManager.FindByIdAsync(userId);
        }

        <li class="nav-item">
            <a class="nav-link">Hello, @(user is null ? "" : user.Name) 👋</a>
        </li>
        <li class="nav-item">
            <a asp-controller="Account" asp-action="Logout" class="nav-link">Logout</a>
        </li>
    }
</ul>